/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Statistics as PrismaStatistics,
  Child as PrismaChild,
} from "@prisma/client";

export class StatisticsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StatisticsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.statistics.count(args);
  }

  async statisticsItems(
    args: Prisma.StatisticsFindManyArgs
  ): Promise<PrismaStatistics[]> {
    return this.prisma.statistics.findMany(args);
  }
  async statistics(
    args: Prisma.StatisticsFindUniqueArgs
  ): Promise<PrismaStatistics | null> {
    return this.prisma.statistics.findUnique(args);
  }
  async createStatistics(
    args: Prisma.StatisticsCreateArgs
  ): Promise<PrismaStatistics> {
    return this.prisma.statistics.create(args);
  }
  async updateStatistics(
    args: Prisma.StatisticsUpdateArgs
  ): Promise<PrismaStatistics> {
    return this.prisma.statistics.update(args);
  }
  async deleteStatistics(
    args: Prisma.StatisticsDeleteArgs
  ): Promise<PrismaStatistics> {
    return this.prisma.statistics.delete(args);
  }

  async getChild(parentId: string): Promise<PrismaChild | null> {
    return this.prisma.statistics
      .findUnique({
        where: { id: parentId },
      })
      .child();
  }
}
