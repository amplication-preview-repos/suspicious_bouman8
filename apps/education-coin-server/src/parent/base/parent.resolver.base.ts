/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Parent } from "./Parent";
import { ParentCountArgs } from "./ParentCountArgs";
import { ParentFindManyArgs } from "./ParentFindManyArgs";
import { ParentFindUniqueArgs } from "./ParentFindUniqueArgs";
import { CreateParentArgs } from "./CreateParentArgs";
import { UpdateParentArgs } from "./UpdateParentArgs";
import { DeleteParentArgs } from "./DeleteParentArgs";
import { ChildFindManyArgs } from "../../child/base/ChildFindManyArgs";
import { Child } from "../../child/base/Child";
import { ContractFindManyArgs } from "../../contract/base/ContractFindManyArgs";
import { Contract } from "../../contract/base/Contract";
import { QuizFindManyArgs } from "../../quiz/base/QuizFindManyArgs";
import { Quiz } from "../../quiz/base/Quiz";
import { ParentService } from "../parent.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Parent)
export class ParentResolverBase {
  constructor(
    protected readonly service: ParentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Parent",
    action: "read",
    possession: "any",
  })
  async _parentsMeta(
    @graphql.Args() args: ParentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Parent])
  @nestAccessControl.UseRoles({
    resource: "Parent",
    action: "read",
    possession: "any",
  })
  async parents(@graphql.Args() args: ParentFindManyArgs): Promise<Parent[]> {
    return this.service.parents(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Parent, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Parent",
    action: "read",
    possession: "own",
  })
  async parent(
    @graphql.Args() args: ParentFindUniqueArgs
  ): Promise<Parent | null> {
    const result = await this.service.parent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Parent)
  @nestAccessControl.UseRoles({
    resource: "Parent",
    action: "create",
    possession: "any",
  })
  async createParent(@graphql.Args() args: CreateParentArgs): Promise<Parent> {
    return await this.service.createParent({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Parent)
  @nestAccessControl.UseRoles({
    resource: "Parent",
    action: "update",
    possession: "any",
  })
  async updateParent(
    @graphql.Args() args: UpdateParentArgs
  ): Promise<Parent | null> {
    try {
      return await this.service.updateParent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Parent)
  @nestAccessControl.UseRoles({
    resource: "Parent",
    action: "delete",
    possession: "any",
  })
  async deleteParent(
    @graphql.Args() args: DeleteParentArgs
  ): Promise<Parent | null> {
    try {
      return await this.service.deleteParent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Child], { name: "children" })
  @nestAccessControl.UseRoles({
    resource: "Child",
    action: "read",
    possession: "any",
  })
  async findChildren(
    @graphql.Parent() parent: Parent,
    @graphql.Args() args: ChildFindManyArgs
  ): Promise<Child[]> {
    const results = await this.service.findChildren(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Contract], { name: "contracts" })
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "read",
    possession: "any",
  })
  async findContracts(
    @graphql.Parent() parent: Parent,
    @graphql.Args() args: ContractFindManyArgs
  ): Promise<Contract[]> {
    const results = await this.service.findContracts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Quiz], { name: "quizzes" })
  @nestAccessControl.UseRoles({
    resource: "Quiz",
    action: "read",
    possession: "any",
  })
  async findQuizzes(
    @graphql.Parent() parent: Parent,
    @graphql.Args() args: QuizFindManyArgs
  ): Promise<Quiz[]> {
    const results = await this.service.findQuizzes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
